# Ledger Transaction Signing Findings

## Latest Success! (2024-03-19)

### Working Solution
- Successfully got signature from Ledger device
- User was able to approve on device
- Signature format confirmed working

### Working Transaction Format
```typescript
// Transaction data format:
{
  nonce: 0,
  type: 0, // Legacy transaction type
  chainId: 43114,
  gasPrice: maxFeePerGas, // Use maxFeePerGas as gasPrice
  gasLimit: 45427,
  data: "0xa9059cbb...", // USDC.e transfer
  from: "0x449b3fffe66378227dbbd05539b6542e5ca75a28",
  to: "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E"
}

// RLP encoded:
0xf86b8085022ad57bb082b17394b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e80b844a9059cbb...
```

### Working Resolution Object
```typescript
{
  externalPlugin: [],
  erc20Tokens: ['0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E'],
  nfts: [],
  plugin: [],
  domains: [] // Required field
}
```

### Signature Format
```typescript
{
  v: "0150f8",
  r: "20f4e602da6206d60ead3988e0415fb9119db0debe1d4d2c4910702cd32900fe",
  s: "017447d453a1648c4813fa1685b718a70320651f7134573e1f06dcf5c077b6c3"
}
```

## Key Learnings
1. Must use legacy transaction format (type 0) instead of EIP-1559
2. Resolution object requires domains field
3. Signature comes back as object with r, s, v properties
4. Need to concatenate signature parts with 0x prefix

## Working Implementation Steps
1. Convert EIP-1559 transaction to legacy format
2. Use maxFeePerGas as gasPrice
3. Include domains array in resolution object
4. Handle signature result as object properties
5. Concatenate signature parts correctly

## Previous Failed Attempts

### 1. Using LedgerSigner from SDK
```typescript
const signer = await this.getEvmSigner(provider, accountIndex)
```
Status: ❌ Failed
Reason: Direct SDK signer approach doesn't work with Ledger device

### 2. Raw Transaction Data
```typescript
const unsignedTx = transaction.data?.toString() || ''
```
Status: ❌ Failed
Reason: Data too short, missing proper transaction structure

### 3. Ethers.js Transaction.from() with EIP-1559
```typescript
const tx = {
  type: 2,
  chainId: transaction.chainId,
  maxFeePerGas: transaction.maxFeePerGas,
  maxPriorityFeePerGas: transaction.maxPriorityFeePerGas,
  // ...
}
```
Status: ❌ Failed
Reason: Ledger app doesn't support EIP-1559 format

### 4. Manual Hex Concatenation
```typescript
const unsignedTx = [txType, txNonce, ...].join('')
```
Status: ❌ Failed
Reason: Incorrect transaction format

### 5. Using Ethereum App
```typescript
const ethApp = new AppEth(transport)
```
Status: ❌ Failed
Reason: Wrong app for Avalanche C-Chain

### 6. Using Avalanche App with signTransaction
```typescript
const avaxApp = new AppAvax(transport)
await avaxApp.signTransaction(...)
```
Status: ❌ Failed
Reason: Wrong method name

### 7. Using Avalanche App with signEVMTransaction and EIP-1559
```typescript
const avaxApp = new AppAvax(transport)
await avaxApp.signEVMTransaction(...)
```
Status: ❌ Failed
Reason: EIP-1559 format not supported

### 8. Using Avalanche App with signEVMTransaction and Legacy Format
```typescript
const avaxApp = new AppAvax(transport)
const result = await avaxApp.signEVMTransaction(...)
return `0x${result.r}${result.s}${result.v}`
```
Status: ✅ Success
Reason: Legacy format works with proper signature handling

## Requirements for Valid Transaction
1. Must use legacy transaction format (type 0)
2. Must include all required fields
3. Must use correct signing method (signEVMTransaction)
4. Resolution object must include all fields including domains
5. Must handle chainId 43114 (Avalanche C-Chain) correctly
6. Must properly concatenate signature components