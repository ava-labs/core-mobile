diff --git a/node_modules/react-native/Libraries/Utilities/HMRClient.js b/node_modules/react-native/Libraries/Utilities/HMRClient.js
index 5651788..2bc6004 100644
--- a/node_modules/react-native/Libraries/Utilities/HMRClient.js
+++ b/node_modules/react-native/Libraries/Utilities/HMRClient.js
@@ -10,6 +10,7 @@
 
 import type {ExtendedError} from '../Core/ExtendedError';
 
+import stringify from "json-stringify-pretty-compact";
 import getDevServer from '../Core/Devtools/getDevServer';
 import LogBox from '../LogBox/LogBox';
 import NativeRedBox from '../NativeModules/specs/NativeRedBox';
@@ -126,13 +127,14 @@ const HMRClient: HMRClientNativeInterface = {
           data: data.map(item =>
             typeof item === 'string'
               ? item
-              : prettyFormat.format(item, {
-                  escapeString: true,
-                  highlight: true,
-                  maxDepth: 3,
-                  min: true,
-                  plugins: [prettyFormat.plugins.ReactElement],
-                }),
+              : item instanceof Error ? item.message : stringify(item)
+              // : prettyFormat.format(item, {
+              //     escapeString: true,
+              //     highlight: true,
+              //     maxDepth: 3,
+              //     min: true,
+              //     plugins: [prettyFormat.plugins.ReactElement],
+              //   }),
           ),
         }),
       );
diff --git a/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp b/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp
index e63260a..134e3a6 100644
--- a/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp
+++ b/node_modules/react-native/ReactCommon/jsc/JSCRuntime.cpp
@@ -378,9 +378,9 @@ JSCRuntime::JSCRuntime(JSGlobalContextRef ctx)
 #ifndef NDEBUG
 #ifdef _JSC_HAS_INSPECTABLE
 #if (__OSX_AVAILABLE_STARTING(MAC_NA, IPHONE_16_4))
-  if (__builtin_available(macOS 13.3, iOS 16.4, tvOS 16.4, *)) {
-    JSGlobalContextSetInspectable(ctx_, true);
-  }
+  // if (__builtin_available(macOS 13.3, iOS 16.4, tvOS 16.4, *)) {
+  //   JSGlobalContextSetInspectable(ctx_, true);
+  // }
 #endif
 #endif
 #endif
@@ -401,12 +401,12 @@ JSCRuntime::~JSCRuntime() {
   // No need to unprotect nativeStateSymbol_ since the heap is getting torn down
   // anyway
   JSGlobalContextRelease(ctx_);
-#ifndef NDEBUG
-  assert(
-      objectCounter_ == 0 && "JSCRuntime destroyed with a dangling API object");
-  assert(
-      stringCounter_ == 0 && "JSCRuntime destroyed with a dangling API string");
-#endif
+// #ifndef NDEBUG
+//   assert(
+//       objectCounter_ == 0 && "JSCRuntime destroyed with a dangling API object");
+//   assert(
+//       stringCounter_ == 0 && "JSCRuntime destroyed with a dangling API string");
+// #endif
 }
 
 std::shared_ptr<const jsi::PreparedJavaScript> JSCRuntime::prepareJavaScript(
