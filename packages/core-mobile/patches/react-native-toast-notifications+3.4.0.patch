diff --git a/node_modules/react-native-toast-notifications/lib/typescript/toast-container.d.ts b/node_modules/react-native-toast-notifications/lib/typescript/toast-container.d.ts
index 0b942aa..a6e289b 100644
--- a/node_modules/react-native-toast-notifications/lib/typescript/toast-container.d.ts
+++ b/node_modules/react-native-toast-notifications/lib/typescript/toast-container.d.ts
@@ -9,6 +9,11 @@ export interface Props extends ToastOptions {
     offsetTop?: number;
     offsetBottom?: number;
     swipeEnabled?: boolean;
+    ToastContainerWrapper?: {
+        component: React.ComponentType<any>;
+        props: any;
+    };
+    containerStyle?: ViewStyle
 }
 interface State {
     toasts: Array<ToastProps>;
diff --git a/node_modules/react-native-toast-notifications/src/toast-container.tsx b/node_modules/react-native-toast-notifications/src/toast-container.tsx
index 5d2a8b4..8230603 100644
--- a/node_modules/react-native-toast-notifications/src/toast-container.tsx
+++ b/node_modules/react-native-toast-notifications/src/toast-container.tsx
@@ -4,7 +4,8 @@ import {
   ViewStyle,
   KeyboardAvoidingView,
   Platform,
-  Dimensions, SafeAreaView,
+  Dimensions,
+  SafeAreaView,
 } from "react-native";
 import Toast, { ToastOptions, ToastProps } from "./toast";
 
@@ -17,6 +18,11 @@ export interface Props extends ToastOptions {
   offsetTop?: number;
   offsetBottom?: number;
   swipeEnabled?: boolean;
+  ToastContainerWrapper?: {
+    component: React.ComponentType<any>;
+    props: any;
+  };
+  containerStyle?: ViewStyle
 }
 
 interface State {
@@ -111,7 +117,7 @@ class ToastContainer extends Component<Props, State> {
 
   renderBottomToasts() {
     const { toasts } = this.state;
-    let { offset, offsetBottom } = this.props;
+    let { offset, offsetBottom, containerStyle } = this.props;
     let style: ViewStyle = {
       bottom: offsetBottom || offset,
       width: width,
@@ -121,7 +127,7 @@ class ToastContainer extends Component<Props, State> {
     return (
       <KeyboardAvoidingView
         behavior={Platform.OS === "ios" ? "position" : undefined}
-        style={[styles.container, style]}
+        style={[styles.container, style, containerStyle]}
         pointerEvents="box-none"
       >
         <SafeAreaView>
@@ -137,7 +143,7 @@ class ToastContainer extends Component<Props, State> {
 
   renderTopToasts() {
     const { toasts } = this.state;
-    let { offset, offsetTop } = this.props;
+    let { offset, offsetTop, containerStyle } = this.props;
     let style: ViewStyle = {
       top: offsetTop || offset,
       width: width,
@@ -147,7 +153,7 @@ class ToastContainer extends Component<Props, State> {
     return (
       <KeyboardAvoidingView
         behavior={Platform.OS === "ios" ? "position" : undefined}
-        style={[styles.container, style]}
+        style={[styles.container, style, containerStyle]}
         pointerEvents="box-none"
       >
         <SafeAreaView>
@@ -163,7 +169,7 @@ class ToastContainer extends Component<Props, State> {
 
   renderCenterToasts() {
     const { toasts } = this.state;
-    let { offset, offsetTop } = this.props;
+    let { offset, offsetTop, containerStyle } = this.props;
     let style: ViewStyle = {
       top: offsetTop || offset,
       height: height,
@@ -180,7 +186,7 @@ class ToastContainer extends Component<Props, State> {
     return (
       <KeyboardAvoidingView
         behavior={Platform.OS === "ios" ? "position" : undefined}
-        style={[styles.container, style]}
+        style={[styles.container, style, containerStyle]}
         pointerEvents="box-none"
       >
         {toasts
@@ -193,7 +199,15 @@ class ToastContainer extends Component<Props, State> {
   }
 
   render() {
-    return (
+    const { ToastContainerWrapper } = this.props;
+
+    return ToastContainerWrapper ? (
+      <ToastContainerWrapper.component {...ToastContainerWrapper.props}>
+        {this.renderTopToasts()}
+        {this.renderBottomToasts()}
+        {this.renderCenterToasts()}
+      </ToastContainerWrapper.component>
+    ) : (
       <>
         {this.renderTopToasts()}
         {this.renderBottomToasts()}
@@ -211,9 +225,12 @@ const styles = StyleSheet.create({
     maxWidth: "100%",
     zIndex: 999999,
     elevation: 999999,
-    alignSelf: 'center',
-    ...(Platform.OS === "web" ? { overflow: "hidden", userSelect: 'none' } : null),
+    alignSelf: "center",
+    ...(Platform.OS === "web"
+      ? { overflow: "hidden", userSelect: "none" }
+      : null),
   },
+  
   message: {
     color: "#333",
   },
diff --git a/node_modules/react-native-toast-notifications/src/toast.tsx b/node_modules/react-native-toast-notifications/src/toast.tsx
index bbabca6..72936a4 100644
--- a/node_modules/react-native-toast-notifications/src/toast.tsx
+++ b/node_modules/react-native-toast-notifications/src/toast.tsx
@@ -151,7 +151,6 @@ const Toast: FC<ToastProps> = (props) => {
   const containerRef = useRef<View>(null);
   const [animation] = useState(new Animated.Value(0));
   const panResponderRef = useRef<PanResponderInstance>();
-  const panResponderAnimRef = useRef<Animated.ValueXY>();
   const closeTimeoutRef = useRef<NodeJS.Timeout | null>(null);
   const dims = useDimensions();
 
@@ -191,22 +190,6 @@ const Toast: FC<ToastProps> = (props) => {
     }).start(() => onDestroy());
   };
 
-  const panReleaseToLeft = (gestureState: PanResponderGestureState) => {
-    Animated.timing(getPanResponderAnim(), {
-      toValue: { x: (-dims.width / 10) * 9, y: gestureState.dy },
-      useNativeDriver: Platform.OS !== "web",
-      duration: 250,
-    }).start(() => onDestroy());
-  };
-
-  const panReleaseToRight = (gestureState: PanResponderGestureState) => {
-    Animated.timing(getPanResponderAnim(), {
-      toValue: { x: (dims.width / 10) * 9, y: gestureState.dy },
-      useNativeDriver: Platform.OS !== "web",
-      duration: 250,
-    }).start(() => onDestroy());
-  };
-
   const getPanResponder = () => {
     if (panResponderRef.current) return panResponderRef.current;
     const swipeThreshold = Platform.OS === "android" ? 10 : 0;
@@ -218,34 +201,15 @@ const Toast: FC<ToastProps> = (props) => {
           Math.abs(gestureState.dy) > swipeThreshold
         );
       },
-      onPanResponderMove: (_, gestureState) => {
-        getPanResponderAnim()?.setValue({
-          x: gestureState.dx,
-          y: gestureState.dy,
-        });
-      },
       onPanResponderRelease: (_, gestureState) => {
-        if (gestureState.dx > 50) {
-          panReleaseToRight(gestureState);
-        } else if (gestureState.dx < -50) {
-          panReleaseToLeft(gestureState);
-        } else {
-          Animated.spring(getPanResponderAnim(), {
-            toValue: { x: 0, y: 0 },
-            useNativeDriver: Platform.OS !== "web",
-          }).start();
+        if (gestureState.dy < -20) {
+          handleClose();
         }
       },
     });
     return panResponderRef.current;
   };
 
-  const getPanResponderAnim = () => {
-    if (panResponderAnimRef.current) return panResponderAnimRef.current;
-    panResponderAnimRef.current = new Animated.ValueXY({ x: 0, y: 0 });
-    return panResponderAnimRef.current;
-  };
-
   if (icon === undefined) {
     switch (type) {
       case "success": {
@@ -297,12 +261,6 @@ const Toast: FC<ToastProps> = (props) => {
     ],
   };
 
-  if (swipeEnabled) {
-    animationStyle.transform?.push(
-      getPanResponderAnim().getTranslateTransform()[0]
-    );
-  }
-
   if (animationType === "zoom-in") {
     animationStyle.transform?.push({
       scale: animation.interpolate({
