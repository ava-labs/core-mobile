diff --git a/node_modules/react-native/ReactCommon/jsi/JSCRuntime.cpp b/node_modules/react-native/ReactCommon/jsi/JSCRuntime.cpp
index 5d8487b..37c6a49 100644
--- a/node_modules/react-native/ReactCommon/jsi/JSCRuntime.cpp
+++ b/node_modules/react-native/ReactCommon/jsi/JSCRuntime.cpp
@@ -285,6 +285,9 @@ class JSCRuntime : public jsi::Runtime {
 #if __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_10_0
 #define _JSC_NO_ARRAY_BUFFERS
 #endif
+#if __IPHONE_OS_VERSION_MAX_ALLOWED >= 160400
+#define _JSC_HAS_INSPECTABLE
+#endif
 #endif
 #if defined(__MAC_OS_X_VERSION_MIN_REQUIRED)
 #if __MAC_OS_X_VERSION_MIN_REQUIRED >= __MAC_10_11
@@ -381,6 +384,13 @@ JSCRuntime::JSCRuntime(JSGlobalContextRef ctx)
       stringCounter_(0)
 #endif
 {
+#ifndef NDEBUG
+#ifdef _JSC_HAS_INSPECTABLE
+  if (__builtin_available(macOS 13.3, iOS 16.4, tvOS 16.4, *)) {
+    JSGlobalContextSetInspectable(ctx_, true);
+  }
+#endif
+#endif
 }
 
 JSCRuntime::~JSCRuntime() {
@@ -392,12 +402,12 @@ JSCRuntime::~JSCRuntime() {
   // has started.
   ctxInvalid_ = true;
   JSGlobalContextRelease(ctx_);
-#ifndef NDEBUG
-  assert(
-      objectCounter_ == 0 && "JSCRuntime destroyed with a dangling API object");
-  assert(
-      stringCounter_ == 0 && "JSCRuntime destroyed with a dangling API string");
-#endif
+// #ifndef NDEBUG
+//   assert(
+//       objectCounter_ == 0 && "JSCRuntime destroyed with a dangling API object");
+//   assert(
+//       stringCounter_ == 0 && "JSCRuntime destroyed with a dangling API string");
+// #endif
 }
 
 std::shared_ptr<const jsi::PreparedJavaScript> JSCRuntime::prepareJavaScript(
diff --git a/node_modules/react-native/index.js b/node_modules/react-native/index.js
index d59ba34..3f51111 100644
--- a/node_modules/react-native/index.js
+++ b/node_modules/react-native/index.js
@@ -456,11 +456,12 @@ module.exports = {
     );
   },
   get ViewPropTypes(): $FlowFixMe {
-    invariant(
-      false,
-      'ViewPropTypes has been removed from React Native. Migrate to ' +
-        "ViewPropTypes exported from 'deprecated-react-native-prop-types'.",
-    );
+    return require('deprecated-react-native-prop-types').ViewPropTypes
+    // invariant(
+    //   false,
+    //   'ViewPropTypes has been removed from React Native. Migrate to ' +
+    //     "ViewPropTypes exported from 'deprecated-react-native-prop-types'.",
+    // );
   },
 };
 
diff --git a/node_modules/react-native/scripts/react-native-xcode.sh b/node_modules/react-native/scripts/react-native-xcode.sh
index 927ec76..6e4043a 100755
--- a/node_modules/react-native/scripts/react-native-xcode.sh
+++ b/node_modules/react-native/scripts/react-native-xcode.sh
@@ -129,7 +129,7 @@ fi
 
 PACKAGER_SOURCEMAP_FILE=
 if [[ $EMIT_SOURCEMAP == true ]]; then
-  if [[ $USE_HERMES != false ]]; then
+  if [[ $USE_HERMES == true ]]; then
     PACKAGER_SOURCEMAP_FILE="$CONFIGURATION_BUILD_DIR/$(basename $SOURCEMAP_FILE)"
   else
     PACKAGER_SOURCEMAP_FILE="$SOURCEMAP_FILE"
@@ -138,7 +138,7 @@ if [[ $EMIT_SOURCEMAP == true ]]; then
 fi
 
 # Hermes doesn't require JS minification.
-if [[ $USE_HERMES != false && $DEV == false ]]; then
+if [[ $USE_HERMES == true && $DEV == false ]]; then
   EXTRA_ARGS="$EXTRA_ARGS --minify false"
 fi
 
@@ -153,7 +153,7 @@ fi
   $EXTRA_ARGS \
   $EXTRA_PACKAGER_ARGS
 
-if [[ $USE_HERMES == false ]]; then
+if [[ $USE_HERMES != true ]]; then
   cp "$BUNDLE_FILE" "$DEST/"
   BUNDLE_FILE="$DEST/main.jsbundle"
 else
