require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")

# to prevent error "Unable to find a specification for `React-hermes` depended upon by `RNSentry`"
ENV['USE_HERMES'] = '0'

# Resolve react_native_pods.rb with node to allow for hoisting
def node_require(script)
  # Resolve script with node to allow for hoisting
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
      '#{script}',
      {paths: [process.argv[1]]},
    )", __dir__]).strip
end

# Use it to require both react-native's and this package's scripts:
node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

prepare_react_native_project!

setup_permissions([
  # 'AppTrackingTransparency',
  # 'Bluetooth',
  # 'Calendars',
  # 'CalendarsWriteOnly',
  'Camera',
  # 'Contacts',
  'FaceID',
  # 'LocationAccuracy',
  # 'LocationAlways',
  # 'LocationWhenInUse',
  # 'MediaLibrary',
  # 'Microphone',
  # 'Motion',
  'Notifications',
  # 'PhotoLibrary',
  # 'PhotoLibraryAddOnly',
  # 'Reminders',
  # 'Siri',
  # 'SpeechRecognition',
  # 'StoreKit',
])

platform :ios, '15.1'

# linkage = ENV['USE_FRAMEWORKS']
# if linkage != nil
#   Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
#   use_frameworks! :linkage => linkage.to_sym
# end

abstract_target 'common' do
  use_expo_modules!
  post_integrate do |installer|
    begin
      expo_patch_react_imports!(installer)
    rescue => e
      Pod::UI.warn e
    end
  end
  
  # put common target configuration here
  config_command = [
    'node',
    '--no-warnings',
    '--eval',
    'require(require.resolve(\'expo-modules-autolinking\', { paths: [require.resolve(\'expo/package.json\')] }))(process.argv.slice(1))',
    'react-native-config',
    '--json',
    '--platform',
    'ios'
  ]
 
  config = use_native_modules!(config_command)

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables or disables Hermes; if flag is omitted Hermes will be enabled by default.
    :hermes_enabled => true,
    :fabric_enabled => true,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  pod 'RNFS', :path => '../node_modules/react-native-fs'
  
  # specify OpenSSL version explicitly due to https://github.com/margelo/react-native-quick-crypto/issues/189
  pod "OpenSSL-Universal", "1.1.1100"
  pod 'GoogleUtilities', :modular_headers => true;
  pod 'FirebaseCore', :modular_headers => true
  
  target 'AvaxWallet' do
  end
  
  target 'AvaxWalletInternal' do
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    ) 

    # Modify RCT-Folly Portability.h to disable coroutines
    Dir.glob(installer.sandbox.root + "RCT-Folly/folly/Portability.h") do |file|
      begin
        # First try to make the file writable
        system "chmod +w #{file}"
        
        contents = File.read(file)
        modified_contents = contents.gsub(/#define FOLLY_HAS_COROUTINES 1/, '#define FOLLY_HAS_COROUTINES 0')
        
        # Try writing with elevated privileges if needed
        if !File.writable?(file)
          system "sudo chmod +w #{file}"
        end
        
        File.write(file, modified_contents)
        
        # Optionally restore original permissions
        system "chmod -w #{file}"
      rescue => e
        Pod::UI.warn "Failed to modify Portability.h: #{e.message}"
      end
    end

    # Strip bitcode from OpenSSL framework
    # https://medium.com/@abdulahad2024/fixing-bitcode-issues-in-xcode-16-how-to-resolve-invalid-executable-errors-when-uploading-ios-da07a5a39c7c
    bitcode_strip_path = `xcrun --find bitcode_strip`.chop!
    def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
      framework_path = File.join(Dir.pwd, framework_relative_path)
      command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
      puts "Stripping bitcode: #{command}"
      system(command)
    end

    framework_paths = [
      "Pods/OpenSSL-Universal/Frameworks/OpenSSL.xcframework/ios-arm64_armv7/OpenSSL.framework/OpenSSL",
    ]

    framework_paths.each do |framework_relative_path|
      strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
    end
  end
  
end


