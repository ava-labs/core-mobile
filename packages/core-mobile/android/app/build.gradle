apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    debuggableVariants = ["externalDebug", "internalDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    bundleAssetName = "index.android.bundle"
    
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply from: "../../node_modules/@sentry/react-native/sentry.gradle"

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable Flipper.
 *
 * We enable Flipper for local builds or if PERF_ENABLED env var is set
 */
def isLocalBuild = System.env.CI != 'true'
def perfEnabled = System.env.PERF_ENABLED == 'true'
def flipperEnabled = isLocalBuild || perfEnabled

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 *
 * If Flipper is enabled, we don't enable proguard to help with troubleshooting
 */
def enableProguardInReleaseBuilds = !flipperEnabled

android {
    ndkVersion rootProject.ext.ndkVersion
    compileSdk rootProject.ext.compileSdkVersion
    namespace "com.avaxwallet"

    defaultConfig {
        applicationId "com.avaxwallet"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.appVersionName
        versionCode rootProject.ext.appBuildNumber
        buildConfigField "boolean", "FLIPPER_ENABLED", flipperEnabled.toString()

        testBuildType System.getProperty('testBuildType', 'e2e')  // To control the test apk build type
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        missingDimensionStrategy 'react-native-camera', 'general'

        // required for react native config to work properly across different build variants
        resValue "string", "build_config_package", "com.avaxwallet"
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }

        e2e {
            initWith release
            minifyEnabled false

            // this is for libraries without an e2e build to know to fall back to release
            matchingFallbacks = ['release']

            // Detox-specific additions to pro-guard
            proguardFile "${rootProject.projectDir}/../node_modules/detox/android/detox/proguard-rules-app.pro"
        }
    }

    flavorDimensions = ["version"]

    productFlavors {
        internal {
            applicationIdSuffix ".internal"
        }
        external {}
    }

    sourceSets {
        if (flipperEnabled) {
            main.java.srcDir 'src/flipper/java'
        } else {
            main.java.srcDir 'src/flipperNoop/java'
        }
    }

    packagingOptions {
        pickFirst '**/*.so'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    androidTestImplementation('com.wix:detox:+')

    if (flipperEnabled) {
        implementation("com.facebook.react:flipper-integration")
    }

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

task deleteDuplicateDependencies(type: Delete) {
    doLast {
        exec {
            commandLine '../../remove_android_dups.sh'
        }
    }
}

tasks.named('build') {
    dependsOn 'deleteDuplicateDependencies'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)