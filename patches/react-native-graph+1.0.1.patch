diff --git a/node_modules/react-native-graph/lib/module/AnimatedLineGraph.js b/node_modules/react-native-graph/lib/module/AnimatedLineGraph.js
index 88d58ed..e9c2ec3 100644
--- a/node_modules/react-native-graph/lib/module/AnimatedLineGraph.js
+++ b/node_modules/react-native-graph/lib/module/AnimatedLineGraph.js
@@ -235,6 +235,7 @@ export function AnimatedLineGraph(_ref) {
 
     if (isActive.value) pathEnd.current = fingerX / width;
     const fingerXInRange = Math.max(fingerX - horizontalPadding, 0);
+
     const index = Math.round(fingerXInRange / getXInRange(drawingWidth, pointsInRange[pointsInRange.length - 1].date, pathRange.x) * (pointsInRange.length - 1));
     const pointIndex = Math.min(Math.max(index, 0), pointsInRange.length - 1);
 
diff --git a/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts b/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts
index 5a8490e..8095a0b 100644
--- a/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts
+++ b/node_modules/react-native-graph/lib/typescript/LineGraphProps.d.ts
@@ -46,6 +46,7 @@ interface BaseLineGraphProps extends ViewProps {
 }
 export declare type StaticLineGraphProps = BaseLineGraphProps & {};
 export declare type AnimatedLineGraphProps = BaseLineGraphProps & {
+    shadowColor?: string;
     /**
      * Whether to enable Graph scrubbing/pan gesture.
      */
diff --git a/node_modules/react-native-graph/src/AnimatedLineGraph.tsx b/node_modules/react-native-graph/src/AnimatedLineGraph.tsx
index 7bba35a..ecbb5fe 100644
--- a/node_modules/react-native-graph/src/AnimatedLineGraph.tsx
+++ b/node_modules/react-native-graph/src/AnimatedLineGraph.tsx
@@ -12,9 +12,9 @@ import {
   vec,
   Group,
   PathCommand,
-  useSharedValueEffect,
-  mix,
-  Circle,
+  // useSharedValueEffect,
+  // mix,
+  // Circle,
   Shadow,
 } from '@shopify/react-native-skia'
 import type { AnimatedLineGraphProps } from './LineGraphProps'
@@ -31,29 +31,30 @@ import Reanimated, {
   runOnJS,
   useAnimatedReaction,
   useSharedValue,
-  useDerivedValue,
-  cancelAnimation,
-  withRepeat,
-  withSequence,
-  withTiming,
-  withDelay,
+  // useDerivedValue,
+  // cancelAnimation,
+  // withRepeat,
+  // withSequence,
+  // withTiming,
+  // withDelay,
 } from 'react-native-reanimated'
 import { getSixDigitHex } from './utils/getSixDigitHex'
 import { GestureDetector } from 'react-native-gesture-handler'
 import { usePanGesture } from './hooks/usePanGesture'
-import { getYForX } from './GetYForX'
-import { hexToRgba } from './utils/hexToRgba'
+// import { getYForX } from './GetYForX'
+// import { hexToRgba } from './utils/hexToRgba'
 
 const INDICATOR_RADIUS = 7
 const INDICATOR_BORDER_MULTIPLIER = 1.3
-const INDICATOR_PULSE_BLUR_RADIUS_SMALL =
-  INDICATOR_RADIUS * INDICATOR_BORDER_MULTIPLIER
-const INDICATOR_PULSE_BLUR_RADIUS_BIG =
-  INDICATOR_RADIUS * INDICATOR_BORDER_MULTIPLIER + 20
+// const INDICATOR_PULSE_BLUR_RADIUS_SMALL =
+//   INDICATOR_RADIUS * INDICATOR_BORDER_MULTIPLIER
+// const INDICATOR_PULSE_BLUR_RADIUS_BIG =
+//   INDICATOR_RADIUS * INDICATOR_BORDER_MULTIPLIER + 20
 
 export function AnimatedLineGraph({
   points: allPoints,
   color,
+  shadowColor,
   gradientFillColors,
   lineThickness = 3,
   range,
@@ -85,19 +86,21 @@ export function AnimatedLineGraph({
   const circleX = useValue(0)
   const circleY = useValue(0)
   const pathEnd = useValue(0)
-  const indicatorRadius = useValue(enableIndicator ? INDICATOR_RADIUS : 0)
-  const indicatorBorderRadius = useComputedValue(
-    () => indicatorRadius.current * INDICATOR_BORDER_MULTIPLIER,
-    [indicatorRadius]
-  )
-
-  const pulseTrigger = useDerivedValue(() => {
-    'worklet'
-    return isActive.value ? 1 : 0
-  }, [])
-  const indicatorPulseAnimation = useSharedValue(0)
-  const indicatorPulseRadius = useValue(INDICATOR_PULSE_BLUR_RADIUS_SMALL)
-  const indicatorPulseOpacity = useValue(1)
+  // const indicatorRadius = useValue(enableIndicator ? INDICATOR_RADIUS : 0)
+  // const indicatorBorderRadius = useComputedValue(
+  //   () => indicatorRadius.current * INDICATOR_BORDER_MULTIPLIER,
+  //   [indicatorRadius]
+  // )
+
+  // const pulseTrigger = useDerivedValue(() => {
+  //   'worklet'
+  //   return isActive.value ? 1 : 0
+  // }, [])
+  // const indicatorPulseAnimation = useSharedValue(0)
+  // const indicatorPulseRadius = useSharedValue(INDICATOR_PULSE_BLUR_RADIUS_SMALL)
+  // const indicatorPulseRadius = useValue(INDICATOR_PULSE_BLUR_RADIUS_SMALL)
+  // const indicatorPulseOpacity = useSharedValue(1)
+  // const indicatorPulseOpacity = useValue(1)
 
   const positions = useComputedValue(
     () => [
@@ -150,29 +153,29 @@ export function AnimatedLineGraph({
     [horizontalPadding, width]
   )
 
-  const lineWidth = useMemo(() => {
-    const lastPoint = pointsInRange[pointsInRange.length - 1]
-
-    if (lastPoint == null) return drawingWidth
-
-    return Math.max(getXInRange(drawingWidth, lastPoint.date, pathRange.x), 0)
-  }, [drawingWidth, pathRange.x, pointsInRange])
-
-  const indicatorX = useMemo(
-    () =>
-      commandsChanged >= 0
-        ? Math.floor(lineWidth) + horizontalPadding
-        : undefined,
-    [commandsChanged, horizontalPadding, lineWidth]
-  )
-  const indicatorY = useMemo(
-    () =>
-      commandsChanged >= 0 && indicatorX != null
-        ? getYForX(commands.current, indicatorX)
-        : undefined,
-    [commandsChanged, indicatorX]
-  )
-  const indicatorPulseColor = useMemo(() => hexToRgba(color, 0.4), [color])
+  // const lineWidth = useMemo(() => {
+  //   const lastPoint = pointsInRange[pointsInRange.length - 1]
+
+  //   if (lastPoint == null) return drawingWidth
+
+  //   return Math.max(getXInRange(drawingWidth, lastPoint.date, pathRange.x), 0)
+  // }, [drawingWidth, pathRange.x, pointsInRange])
+
+  // const indicatorX = useMemo(
+  //   () =>
+  //     commandsChanged >= 0
+  //       ? Math.floor(lineWidth) + horizontalPadding
+  //       : undefined,
+  //   [commandsChanged, horizontalPadding, lineWidth]
+  // )
+  // const indicatorY = useMemo(
+  //   () =>
+  //     commandsChanged >= 0 && indicatorX != null
+  //       ? getYForX(commands.current, indicatorX)
+  //       : undefined,
+  //   [commandsChanged, indicatorX]
+  // )
+  // const indicatorPulseColor = useMemo(() => hexToRgba(color, 0.4), [color])
 
   const shouldFillGradient = gradientFillColors != null
 
@@ -318,35 +321,38 @@ export function AnimatedLineGraph({
     [interpolateProgress]
   )
 
-  const stopPulsating = useCallback(() => {
-    cancelAnimation(indicatorPulseAnimation)
-    indicatorPulseAnimation.value = 0
-  }, [indicatorPulseAnimation])
-
-  const startPulsating = useCallback(() => {
-    indicatorPulseAnimation.value = withRepeat(
-      withDelay(
-        1000,
-        withSequence(
-          withTiming(1, { duration: 1100 }),
-          withTiming(0, { duration: 0 }), // revert to 0
-          withTiming(0, { duration: 1200 }), // delay between pulses
-          withTiming(1, { duration: 1100 }),
-          withTiming(1, { duration: 2000 }) // delay after both pulses
-        )
-      ),
-      -1
-    )
-  }, [indicatorPulseAnimation])
+  // const stopPulsating = useCallback(() => {
+  //   cancelAnimation(indicatorPulseAnimation)
+  //   indicatorPulseAnimation.value = 0
+  // }, [indicatorPulseAnimation])
+
+  // const startPulsating = useCallback(() => {
+  //   indicatorPulseAnimation.value = withRepeat(
+  //     withDelay(
+  //       1000,
+  //       withSequence(
+  //         withTiming(1, { duration: 1100 }),
+  //         withTiming(0, { duration: 0 }), // revert to 0
+  //         withTiming(0, { duration: 1200 }), // delay between pulses
+  //         withTiming(1, { duration: 1100 }),
+  //         withTiming(1, { duration: 2000 }) // delay after both pulses
+  //       )
+  //     ),
+  //     -1
+  //   )
+  // }, [indicatorPulseAnimation])
 
   const setFingerX = useCallback(
     (fingerX: number) => {
-      const y = getYForX(commands.current, fingerX)
 
-      if (y != null) {
+      if (!pointsInRange?.[pointsInRange.length - 1]?.date) return 
+
+      // const y = getYForX(commands.current, fingerX)
+
+      //if (y != null) {
         circleX.current = fingerX
-        circleY.current = y
-      }
+        //circleY.current = y
+      //}
 
       if (isActive.value) pathEnd.current = fingerX / width
 
@@ -356,7 +362,7 @@ export function AnimatedLineGraph({
         (fingerXInRange /
           getXInRange(
             drawingWidth,
-            pointsInRange[pointsInRange.length - 1]!.date,
+            pointsInRange[pointsInRange.length - 1].date,
             pathRange.x
           )) *
           (pointsInRange.length - 1)
@@ -374,7 +380,7 @@ export function AnimatedLineGraph({
     },
     [
       circleX,
-      circleY,
+      // circleY,
       drawingWidth,
       horizontalPadding,
       isActive.value,
@@ -388,30 +394,30 @@ export function AnimatedLineGraph({
 
   const setIsActive = useCallback(
     (active: boolean) => {
-      runSpring(indicatorRadius, !active ? INDICATOR_RADIUS : 0, {
-        mass: 1,
-        stiffness: 1000,
-        damping: 50,
-        velocity: 0,
-      })
+      // runSpring(indicatorRadius, !active ? INDICATOR_RADIUS : 0, {
+      //   mass: 1,
+      //   stiffness: 1000,
+      //   damping: 50,
+      //   velocity: 0,
+      // })
 
       if (active) {
         onGestureStart?.()
-        stopPulsating()
+        //stopPulsating()
       } else {
         onGestureEnd?.()
         pointSelectedIndex.current = undefined
         pathEnd.current = 1
-        startPulsating()
+        //startPulsating()
       }
     },
     [
-      indicatorRadius,
+      //indicatorRadius,
       onGestureEnd,
       onGestureStart,
       pathEnd,
-      startPulsating,
-      stopPulsating,
+      // startPulsating,
+      // stopPulsating,
     ]
   )
 
@@ -438,29 +444,29 @@ export function AnimatedLineGraph({
       pathEnd.current = 1
   }, [commands, pathEnd, pointsInRange.length])
 
-  useEffect(() => {
-    if (indicatorPulsating) {
-      startPulsating()
-    }
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [indicatorPulsating])
-
-  useSharedValueEffect(
-    () => {
-      if (pulseTrigger.value === 0) {
-        indicatorPulseRadius.current = mix(
-          indicatorPulseAnimation.value,
-          INDICATOR_PULSE_BLUR_RADIUS_SMALL,
-          INDICATOR_PULSE_BLUR_RADIUS_BIG
-        )
-        indicatorPulseOpacity.current = mix(indicatorPulseAnimation.value, 1, 0)
-      } else {
-        indicatorPulseRadius.current = 0
-      }
-    },
-    indicatorPulseAnimation,
-    pulseTrigger
-  )
+  // useEffect(() => {
+  //   if (indicatorPulsating) {
+  //     startPulsating()
+  //   }
+  //   // eslint-disable-next-line react-hooks/exhaustive-deps
+  // }, [indicatorPulsating])
+
+  // useSharedValueEffect(
+  //   () => {
+  //     if (pulseTrigger.value === 0) {
+  //       indicatorPulseRadius.current = mix(
+  //         indicatorPulseAnimation.value,
+  //         INDICATOR_PULSE_BLUR_RADIUS_SMALL,
+  //         INDICATOR_PULSE_BLUR_RADIUS_BIG
+  //       )
+  //       indicatorPulseOpacity.current = mix(indicatorPulseAnimation.value, 1, 0)
+  //     } else {
+  //       indicatorPulseRadius.current = 0
+  //     }
+  //   },
+  //   indicatorPulseAnimation,
+  //   pulseTrigger
+  // )
 
   const axisLabelContainerStyle = {
     paddingTop: TopAxisLabel != null ? 20 : 0,
@@ -513,6 +519,7 @@ export function AnimatedLineGraph({
                     colors={gradientColors}
                     positions={positions}
                   />
+                     {shadowColor && <Shadow dx={-1} dy={-1} color={shadowColor}  blur={3} />}
                 </Path>
 
                 {shouldFillGradient && (
@@ -539,7 +546,7 @@ export function AnimatedLineGraph({
                 />
               )}
 
-              {enableIndicator && (
+              {/* {enableIndicator && (
                 <Group>
                   {indicatorPulsating && (
                     <Circle
@@ -567,7 +574,7 @@ export function AnimatedLineGraph({
                     color={color}
                   />
                 </Group>
-              )}
+              )} */}
             </Canvas>
           </View>
 
diff --git a/node_modules/react-native-graph/src/CreateGraphPath.ts b/node_modules/react-native-graph/src/CreateGraphPath.ts
index 67e9a2e..e4a9c39 100644
--- a/node_modules/react-native-graph/src/CreateGraphPath.ts
+++ b/node_modules/react-native-graph/src/CreateGraphPath.ts
@@ -193,7 +193,7 @@ function createGraphPathBase({
           return pixel + additionalPixel === exactPointX
         })
 
-      if (!isExactPointInsidePixelRatio) continue
+      // if (!isExactPointInsidePixelRatio) continue
     }
 
     const value = graphData[index]!.value
diff --git a/node_modules/react-native-graph/src/LineGraphProps.ts b/node_modules/react-native-graph/src/LineGraphProps.ts
index f3f27d7..2e76edf 100644
--- a/node_modules/react-native-graph/src/LineGraphProps.ts
+++ b/node_modules/react-native-graph/src/LineGraphProps.ts
@@ -53,6 +53,7 @@ export type StaticLineGraphProps = BaseLineGraphProps & {
   /* any static-only line graph props? */
 }
 export type AnimatedLineGraphProps = BaseLineGraphProps & {
+  shadowColor?: string
   /**
    * Whether to enable Graph scrubbing/pan gesture.
    */
