diff --git a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
index 55e0d2d..f8faad4 100644
--- a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
@@ -1,5 +1,4 @@
 import React, {
-  ForwardedRef,
   useCallback,
   useLayoutEffect,
   useMemo,
@@ -218,17 +217,20 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
     // This shouldn't be necessary but seems to fix a bug where sometimes
     // native values wouldn't update
     isTouchActiveRef.current.native.setValue(0);
-    props.onRelease?.(index);
+    props.onRelease?.(index || 0);
   };
 
   const onDragEnd = useCallback(
     ([from, to]: readonly number[]) => {
+      if (!from || !to) {
+        return
+      }
       const { onDragEnd, data } = propsRef.current;
       if (onDragEnd) {
         const newData = [...data];
         if (from !== to) {
           newData.splice(from, 1);
-          newData.splice(to, 0, data[from]);
+          newData.splice(to, 0, data[from]!);
         }
         onDragEnd({ from, to, data: newData });
       }
@@ -387,8 +389,8 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
           <ScrollOffsetListener
             scrollOffset={scrollOffset}
             onScrollOffsetChange={([offset]) => {
-              scrollOffsetRef.current = offset;
-              props.onScrollOffsetChange?.(offset);
+              scrollOffsetRef.current = offset!;
+              props.onScrollOffsetChange?.(offset!);
             }}
           />
           {!!props.renderPlaceholder && (
diff --git a/node_modules/react-native-draggable-flatlist/src/components/PlaceholderItem.tsx b/node_modules/react-native-draggable-flatlist/src/components/PlaceholderItem.tsx
index 0bb8a20..3777d15 100644
--- a/node_modules/react-native-draggable-flatlist/src/components/PlaceholderItem.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/components/PlaceholderItem.tsx
@@ -50,13 +50,13 @@ function PlaceholderItem<T>({ renderPlaceholder }: Props<T>) {
           call([activeCellSize], ([size]) => {
             // Using animated values to set height caused a bug where item wouldn't correctly update
             // so instead we mirror the animated value in component state.
-            setPlaceholderSize(size);
+            setPlaceholderSize(size!);
           })
         ),
         onChange(
           spacerIndexAnim,
           call([spacerIndexAnim], ([i]) => {
-            onPlaceholderIndexChange(i);
+            onPlaceholderIndexChange(i!);
             if (i === -1) setPlaceholderSize(0);
           })
         ),
diff --git a/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx b/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx
index 99c8d5f..523b9af 100644
--- a/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/context/animatedValueContext.tsx
@@ -1,5 +1,5 @@
 import React, { useContext, useEffect, useMemo } from "react";
-import Animated, {
+import {
   add,
   and,
   block,
diff --git a/node_modules/react-native-draggable-flatlist/src/hooks/useAutoScroll.tsx b/node_modules/react-native-draggable-flatlist/src/hooks/useAutoScroll.tsx
index d023aac..84a52a2 100644
--- a/node_modules/react-native-draggable-flatlist/src/hooks/useAutoScroll.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/hooks/useAutoScroll.tsx
@@ -1,5 +1,5 @@
 import { useRef } from "react";
-import Animated, {
+import {
   abs,
   add,
   and,
@@ -169,17 +169,17 @@ export function useAutoScroll<T>() {
           isScrolledDown,
         ] = curParams;
         const targetOffset = getScrollTargetOffset(
-          distFromTop,
-          distFromBottom,
-          scrollOffset,
+          distFromTop!,
+          distFromBottom!,
+          scrollOffset!,
           !!isScrolledUp,
           !!isScrolledDown
         );
         const scrollingUpAtTop = !!(
-          isScrolledUp && targetOffset <= scrollOffset
+          isScrolledUp && targetOffset <= scrollOffset!
         );
         const scrollingDownAtBottom = !!(
-          isScrolledDown && targetOffset >= scrollOffset
+          isScrolledDown && targetOffset >= scrollOffset!
         );
         shouldScroll =
           targetOffset >= 0 &&
