diff --git a/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx b/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx
index d7b833b..55c4b56 100644
--- a/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/components/CellRendererComponent.tsx
@@ -140,12 +140,15 @@ function CellRendererComponent<T>(props: Props<T>) {
     runOnUI((t: number | null, _layoutDisabled) => {
       "worklet";
       if (!t) return;
+      // @ts-ignore
       const config = global.LayoutAnimationRepository.configs[t];
       if (config) stashConfig(t, config);
       const stashedConfig = getStashedConfig(t);
       if (_layoutDisabled) {
+        // @ts-ignore
         global.LayoutAnimationRepository.removeConfig(t);
       } else if (stashedConfig) {
+        // @ts-ignore
         global.LayoutAnimationRepository.registerConfig(t, stashedConfig);
       }
     })(tag, layoutAnimationDisabled);
@@ -193,18 +196,25 @@ declare global {
 
 runOnUI(() => {
   "worklet";
+  // @ts-ignore
   global.RNDFLLayoutAnimationConfigStash = {};
 })();
 
 function stashConfig(tag: number, config: unknown) {
   "worklet";
+  // @ts-ignore
   if (!global.RNDFLLayoutAnimationConfigStash)
-    global.RNDFLLayoutAnimationConfigStash = {};
+    { // @ts-ignore
+      global.RNDFLLayoutAnimationConfigStash = {};
+    }
+  // @ts-ignore
   global.RNDFLLayoutAnimationConfigStash[tag] = config;
 }
 
 function getStashedConfig(tag: number) {
   "worklet";
+  // @ts-ignore
   if (!global.RNDFLLayoutAnimationConfigStash) return null;
+  // @ts-ignore
   return global.RNDFLLayoutAnimationConfigStash[tag] as Record<string, unknown>;
 }
diff --git a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
index d7d98c2..9659051 100644
--- a/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
+++ b/node_modules/react-native-draggable-flatlist/src/components/DraggableFlatList.tsx
@@ -20,7 +20,7 @@ import Animated, {
   withSpring,
 } from "react-native-reanimated";
 import CellRendererComponent from "./CellRendererComponent";
-import { DEFAULT_PROPS, isWeb } from "../constants";
+import { DEFAULT_PROPS } from "../constants";
 import PlaceholderItem from "./PlaceholderItem";
 import RowItem from "./RowItem";
 import { DraggableFlatListProps } from "../types";
@@ -217,7 +217,7 @@ function DraggableFlatListInner<T>(props: DraggableFlatListProps<T>) {
       const newData = [...data];
       if (from !== to) {
         newData.splice(from, 1);
-        newData.splice(to, 0, data[from]);
+        newData.splice(to, 0, data[from]!);
       }
 
       onDragEnd?.({ from, to, data: newData });
diff --git a/node_modules/react-native-draggable-flatlist/src/constants.ts b/node_modules/react-native-draggable-flatlist/src/constants.ts
index e9d9859..e61bfdf 100644
--- a/node_modules/react-native-draggable-flatlist/src/constants.ts
+++ b/node_modules/react-native-draggable-flatlist/src/constants.ts
@@ -1,6 +1,6 @@
 import { Platform } from "react-native";
 import { PanGestureHandlerProperties } from "react-native-gesture-handler";
-import Animated, {
+import {
   useSharedValue,
   WithSpringConfig,
 } from "react-native-reanimated";
